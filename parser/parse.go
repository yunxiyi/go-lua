// Code generated by goyacc -o parse.go lua.yy. DO NOT EDIT.

//line lua.yy:2
package lua

import __yyfmt__ "fmt"

//line lua.yy:2

import (
	"github.com/yunxiyi/go-lua/ast"
)

//line lua.yy:34
type yySymType struct {
	yys   int
	token ast.Token

	stmts []ast.Stmt
	stmt  ast.Stmt

	funcname *ast.FuncName
	funcexpr *ast.FunctionExpr

	exprlist []ast.Expr
	expr     ast.Expr

	fieldlist []*ast.Field
	field     *ast.Field
	fieldsep  string

	namelist []string
	parlist  *ast.ParList
}

const TK_AND = 57346
const TK_BREAK = 57347
const TK_DO = 57348
const TK_ELSE = 57349
const TK_ELSEIF = 57350
const TK_END = 57351
const TK_FALSE = 57352
const TK_FOR = 57353
const TK_FUNCTION = 57354
const TK_IF = 57355
const TK_IN = 57356
const TK_LOCAL = 57357
const TK_NIL = 57358
const TK_NOT = 57359
const TK_OR = 57360
const TK_RETURN = 57361
const TK_REPEAT = 57362
const TK_THEN = 57363
const TK_TRUE = 57364
const TK_UNTIL = 57365
const TK_WHILE = 57366
const TK_DOTS = 57367
const TK_CONCAT = 57368
const TK_LONGSTRING = 57369
const TK_SHORTCOMMENT = 57370
const TK_LONGCOMMENT = 57371
const TK_WHITESPACE = 57372
const TK_NEWLINE = 57373
const TK_BADCHAR = 57374
const UNARY = 57375
const TK_EQ = 57376
const TK_NE = 57377
const TK_LE = 57378
const TK_GE = 57379
const TK_NAME = 57380
const TK_NUMBER = 57381
const TK_STRING = 57382
const T2Comma = 57383
const T3Comma = 57384

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TK_AND",
	"TK_BREAK",
	"TK_DO",
	"TK_ELSE",
	"TK_ELSEIF",
	"TK_END",
	"TK_FALSE",
	"TK_FOR",
	"TK_FUNCTION",
	"TK_IF",
	"TK_IN",
	"TK_LOCAL",
	"TK_NIL",
	"TK_NOT",
	"TK_OR",
	"TK_RETURN",
	"TK_REPEAT",
	"TK_THEN",
	"TK_TRUE",
	"TK_UNTIL",
	"TK_WHILE",
	"TK_DOTS",
	"TK_CONCAT",
	"TK_LONGSTRING",
	"TK_SHORTCOMMENT",
	"TK_LONGCOMMENT",
	"TK_WHITESPACE",
	"TK_NEWLINE",
	"TK_BADCHAR",
	"UNARY",
	"TK_EQ",
	"TK_NE",
	"TK_LE",
	"TK_GE",
	"TK_NAME",
	"TK_NUMBER",
	"TK_STRING",
	"T2Comma",
	"T3Comma",
	"'{'",
	"'('",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"';'",
	"'='",
	"','",
	"':'",
	"'.'",
	"'['",
	"']'",
	"'#'",
	"')'",
	"'}'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line lua.yy:522

func TokenName(c int) string {
	start := TK_AND - 3
	if c >= start && c-start < len(yyToknames) {
		if yyToknames[c-start] != "" {
			return yyToknames[c-start]
		}
	}
	return "CHAR " + string([]byte{byte(c)})
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 17,
	54, 31,
	55, 31,
	-2, 69,
	-1, 94,
	54, 32,
	55, 32,
	-2, 69,
}

const yyPrivate = 57344

const yyLast = 641

var yyAct = [...]int{

	24, 89, 51, 23, 46, 85, 57, 63, 138, 154,
	137, 133, 53, 66, 55, 54, 33, 135, 114, 143,
	106, 64, 32, 62, 109, 110, 49, 112, 107, 66,
	132, 156, 50, 42, 43, 82, 83, 84, 163, 167,
	40, 139, 92, 41, 48, 96, 93, 105, 49, 22,
	81, 86, 100, 68, 50, 151, 47, 45, 44, 40,
	21, 107, 41, 48, 108, 61, 20, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 73, 74, 72, 71, 66, 150, 149,
	75, 63, 140, 134, 69, 70, 76, 77, 78, 79,
	80, 81, 111, 142, 145, 144, 147, 146, 31, 149,
	148, 9, 49, 166, 98, 49, 153, 152, 50, 75,
	103, 50, 97, 60, 56, 76, 77, 78, 79, 80,
	81, 78, 79, 80, 81, 155, 188, 92, 157, 39,
	158, 19, 17, 169, 170, 168, 185, 180, 179, 173,
	165, 160, 95, 101, 52, 1, 136, 164, 26, 88,
	38, 131, 65, 171, 25, 35, 172, 30, 174, 18,
	27, 176, 175, 8, 59, 58, 37, 3, 161, 183,
	182, 68, 4, 94, 184, 2, 90, 28, 40, 187,
	29, 41, 20, 0, 0, 67, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 36, 0,
	87, 73, 74, 72, 71, 0, 0, 0, 75, 0,
	0, 0, 69, 70, 76, 77, 78, 79, 80, 81,
	26, 0, 38, 0, 0, 0, 25, 35, 113, 0,
	0, 68, 27, 0, 0, 0, 0, 0, 37, 0,
	0, 0, 0, 0, 0, 67, 0, 0, 21, 28,
	40, 0, 29, 41, 20, 0, 0, 0, 34, 0,
	0, 73, 74, 72, 71, 0, 0, 0, 75, 0,
	36, 99, 69, 70, 76, 77, 78, 79, 80, 81,
	0, 26, 0, 38, 0, 0, 159, 25, 35, 0,
	0, 68, 0, 27, 0, 0, 0, 0, 0, 37,
	0, 0, 0, 0, 0, 67, 0, 0, 0, 90,
	28, 40, 0, 29, 41, 20, 0, 0, 0, 34,
	0, 73, 74, 72, 71, 0, 0, 0, 75, 91,
	0, 36, 69, 70, 76, 77, 78, 79, 80, 81,
	0, 26, 0, 38, 0, 0, 141, 25, 35, 0,
	0, 0, 68, 27, 177, 0, 0, 0, 0, 37,
	0, 0, 0, 0, 0, 0, 67, 0, 0, 21,
	28, 40, 0, 29, 41, 20, 68, 0, 0, 34,
	0, 0, 73, 74, 72, 71, 0, 0, 0, 75,
	67, 36, 0, 69, 70, 76, 77, 78, 79, 80,
	81, 0, 68, 178, 186, 0, 73, 74, 72, 71,
	0, 0, 0, 75, 0, 0, 67, 69, 70, 76,
	77, 78, 79, 80, 81, 0, 0, 162, 0, 0,
	0, 0, 73, 74, 72, 71, 0, 68, 0, 75,
	0, 0, 0, 69, 70, 76, 77, 78, 79, 80,
	81, 67, 0, 0, 181, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 74, 72,
	71, 0, 67, 0, 75, 104, 0, 0, 69, 70,
	76, 77, 78, 79, 80, 81, 0, 0, 73, 74,
	72, 71, 0, 0, 68, 75, 102, 0, 0, 69,
	70, 76, 77, 78, 79, 80, 81, 0, 67, 0,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 74, 72, 71, 67, 0,
	0, 75, 0, 0, 0, 69, 70, 76, 77, 78,
	79, 80, 81, 0, 73, 74, 72, 71, 0, 0,
	0, 75, 0, 0, 0, 69, 70, 76, 77, 78,
	79, 80, 81, 73, 74, 72, 71, 0, 0, 0,
	75, 0, 0, 0, 69, 70, 76, 77, 78, 79,
	80, 81, 7, 10, 0, 0, 0, 0, 14, 15,
	13, 0, 16, 0, 0, 0, 6, 12, 0, 0,
	0, 11, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 21, 0, 0, 0, 0,
	0, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	5,
}
var yyPact = [...]int{

	-1000, -1000, 587, -4, -1000, -1000, 341, -1000, -21, 0,
	-1000, 341, -1000, 341, 86, 85, 53, -1000, -1000, -1000,
	341, -1000, -1000, -26, 520, -1000, -1000, -1000, -1000, -1000,
	-1000, 0, -1000, -1000, 341, 341, 341, -1000, 7, -1000,
	-1000, 148, 341, 22, 341, 84, -1000, 76, 220, -1000,
	-1000, 144, -1000, 500, 97, 464, -7, 6, 7, -32,
	-1000, 64, -27, -1000, 177, -43, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, -2, -2, -2, -1000, -31, -1000, -45, -1000,
	-13, 341, 520, -26, -1000, 0, 297, -1000, 19, -1000,
	-42, -1000, -1000, 341, -1000, 341, 341, 51, -1000, 50,
	17, 7, 341, -1000, -1000, 520, 49, 539, 78, 78,
	78, 78, 78, 78, 78, 82, 82, -2, -2, -2,
	-2, -52, -1000, -1000, -24, -1000, 281, -1000, -1000, 341,
	237, -1000, -1000, -1000, 142, 520, -1000, 382, 32, -1000,
	-1000, -1000, -1000, -26, -1000, 141, 71, -1000, 520, -15,
	-1000, 136, 341, -1000, 140, -1000, -1000, 341, -1000, -1000,
	341, 358, 139, -1000, 520, 138, 443, -1000, 341, -1000,
	-1000, -1000, 137, 408, -1000, -1000, -1000, 127, -1000,
}
var yyPgo = [...]int{

	0, 154, 185, 2, 182, 178, 177, 175, 174, 173,
	139, 6, 3, 0, 22, 108, 141, 169, 4, 167,
	5, 161, 16, 159, 1, 156,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 2, 2, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 5, 5, 6, 6, 6, 7, 7, 8,
	8, 9, 9, 10, 10, 10, 11, 11, 12, 12,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 14, 15,
	15, 15, 15, 17, 16, 16, 18, 18, 18, 18,
	19, 20, 20, 21, 21, 21, 22, 22, 23, 23,
	23, 24, 24, 24, 25, 25,
}
var yyR2 = [...]int{

	0, 1, 2, 3, 0, 2, 2, 1, 3, 1,
	3, 5, 4, 6, 8, 9, 11, 7, 3, 4,
	4, 2, 0, 5, 1, 2, 1, 1, 3, 1,
	3, 1, 3, 1, 4, 3, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 1, 1, 1,
	1, 1, 3, 3, 2, 4, 2, 3, 1, 1,
	2, 5, 4, 1, 1, 3, 2, 3, 1, 3,
	2, 3, 5, 1, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -2, -6, -4, 53, 19, 5, -9, -15,
	6, 24, 20, 13, 11, 12, 15, -10, -17, -16,
	44, 38, 53, -12, -13, 16, 10, 22, 39, 42,
	-19, -15, -14, -22, 48, 17, 60, 28, 12, -10,
	40, 43, 54, 55, 58, 57, -18, 56, 44, -22,
	-14, -3, -1, -13, -3, -13, 38, -11, -7, -8,
	38, 12, -11, 38, -13, -16, 55, 18, 4, 45,
	46, 37, 36, 34, 35, 41, 47, 48, 49, 50,
	51, 52, -13, -13, -13, -20, 44, 62, -23, -24,
	38, 58, -13, -12, -10, -15, -13, 38, 38, 61,
	-12, 9, 6, 23, 21, 54, 14, 55, -20, 56,
	57, 38, 54, 61, 61, -13, -13, -13, -13, -13,
	-13, -13, -13, -13, -13, -13, -13, -13, -13, -13,
	-13, -21, 61, 42, -11, 62, -25, 55, 53, 54,
	-13, 59, -18, 61, -3, -13, -3, -13, -12, 38,
	38, 38, -20, -12, 61, -3, 55, -24, -13, 59,
	9, -5, 55, 6, -3, 9, 42, 54, 9, 7,
	8, -13, -3, 9, -13, -3, -13, 6, 55, 9,
	9, 21, -3, -13, -3, 9, 6, -3, 9,
}
var yyDef = [...]int{

	4, -2, 1, 2, 5, 6, 24, 26, 0, 9,
	4, 0, 4, 0, 0, 0, 0, -2, 70, 71,
	0, 33, 3, 25, 38, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 0, 0, 0, 67, 0, 69,
	68, 0, 0, 0, 0, 0, 74, 0, 0, 78,
	79, 0, 7, 0, 0, 0, 36, 0, 0, 27,
	29, 0, 21, 36, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 65, 66, 80, 0, 86, 0, 88,
	33, 0, 93, 8, -2, 0, 0, 35, 0, 76,
	0, 10, 4, 0, 4, 0, 0, 0, 18, 0,
	0, 0, 0, 72, 73, 39, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 0, 4, 83, 84, 87, 90, 94, 95, 0,
	0, 34, 75, 77, 0, 12, 22, 0, 0, 37,
	28, 30, 19, 20, 4, 0, 0, 89, 91, 0,
	11, 0, 0, 4, 0, 82, 85, 0, 13, 4,
	0, 0, 0, 81, 92, 0, 0, 4, 0, 17,
	14, 4, 0, 0, 23, 15, 4, 0, 16,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 60, 3, 51, 3, 3,
	44, 61, 49, 47, 55, 48, 57, 50, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 56, 53,
	46, 54, 45, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 58, 3, 59, 52, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 43, 3, 62,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:78
		{
			yyVAL.stmts = yyDollar[1].stmts
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line lua.yy:84
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:90
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
//line lua.yy:98
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line lua.yy:101
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line lua.yy:104
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:109
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:114
		{
			yyVAL.stmt = &ast.AssignStmt{Lhs: yyDollar[1].exprlist, Rhs: yyDollar[3].exprlist}
			yyVAL.stmt.SetLine(yyDollar[1].exprlist[0].Line())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:119
		{
			if _, ok := yyDollar[1].expr.(*ast.FuncCallExpr); !ok {
				yylex.(*Lexer).Error("parse error")
			} else {
				yyVAL.stmt = &ast.FuncCallStmt{Expr: yyDollar[1].expr}
				yyVAL.stmt.SetLine(yyDollar[1].expr.Line())
			}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:127
		{
			yyVAL.stmt = &ast.DoBlockStmt{Stmts: yyDollar[2].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[3].token.Pos.Line)
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line lua.yy:132
		{
			yyVAL.stmt = &ast.WhileStmt{Condition: yyDollar[2].expr, Stmts: yyDollar[4].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[5].token.Pos.Line)
		}
	case 12:
		yyDollar = yyS[yypt-4 : yypt+1]
//line lua.yy:137
		{
			yyVAL.stmt = &ast.RepeatStmt{Condition: yyDollar[4].expr, Stmts: yyDollar[2].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[4].expr.Line())
		}
	case 13:
		yyDollar = yyS[yypt-6 : yypt+1]
//line lua.yy:142
		{
			yyVAL.stmt = &ast.IfStmt{Condition: yyDollar[2].expr, Then: yyDollar[4].stmts}
			cur := yyVAL.stmt
			for _, elseif := range yyDollar[5].stmts {
				cur.(*ast.IfStmt).Else = []ast.Stmt{elseif}
				cur = elseif
			}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[6].token.Pos.Line)
		}
	case 14:
		yyDollar = yyS[yypt-8 : yypt+1]
//line lua.yy:152
		{
			yyVAL.stmt = &ast.IfStmt{Condition: yyDollar[2].expr, Then: yyDollar[4].stmts}
			cur := yyVAL.stmt
			for _, elseif := range yyDollar[5].stmts {
				cur.(*ast.IfStmt).Else = []ast.Stmt{elseif}
				cur = elseif
			}
			cur.(*ast.IfStmt).Else = yyDollar[7].stmts
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[8].token.Pos.Line)
		}
	case 15:
		yyDollar = yyS[yypt-9 : yypt+1]
//line lua.yy:163
		{
			yyVAL.stmt = &ast.NumberForStmt{Name: yyDollar[2].token.Str, Init: yyDollar[4].expr, Limit: yyDollar[6].expr, Stmts: yyDollar[8].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[9].token.Pos.Line)
		}
	case 16:
		yyDollar = yyS[yypt-11 : yypt+1]
//line lua.yy:168
		{
			yyVAL.stmt = &ast.NumberForStmt{Name: yyDollar[2].token.Str, Init: yyDollar[4].expr, Limit: yyDollar[6].expr, Step: yyDollar[8].expr, Stmts: yyDollar[10].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[11].token.Pos.Line)
		}
	case 17:
		yyDollar = yyS[yypt-7 : yypt+1]
//line lua.yy:173
		{
			yyVAL.stmt = &ast.GenericForStmt{Names: yyDollar[2].namelist, Exprs: yyDollar[4].exprlist, Stmts: yyDollar[6].stmts}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[7].token.Pos.Line)
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:178
		{
			yyVAL.stmt = &ast.FuncDefStmt{Name: yyDollar[2].funcname, Func: yyDollar[3].funcexpr}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[3].funcexpr.LastLine())
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
//line lua.yy:183
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: []string{yyDollar[3].token.Str}, Exprs: []ast.Expr{yyDollar[4].funcexpr}}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.stmt.SetLastLine(yyDollar[4].funcexpr.LastLine())
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line lua.yy:188
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: yyDollar[2].namelist, Exprs: yyDollar[4].exprlist}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line lua.yy:192
		{
			yyVAL.stmt = &ast.LocalAssignStmt{Names: yyDollar[2].namelist, Exprs: []ast.Expr{}}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
//line lua.yy:198
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line lua.yy:201
		{
			yyVAL.stmts = append(yyDollar[1].stmts, &ast.IfStmt{Condition: yyDollar[3].expr, Then: yyDollar[5].stmts})
			yyVAL.stmts[len(yyVAL.stmts)-1].SetLine(yyDollar[2].token.Pos.Line)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:207
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: nil}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line lua.yy:211
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprlist}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:215
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:221
		{
			yyVAL.funcname = yyDollar[1].funcname
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:224
		{
			yyVAL.funcname = &ast.FuncName{Func: nil, Receiver: yyDollar[1].funcname.Func, Method: yyDollar[3].token.Str}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:229
		{
			yyVAL.funcname = &ast.FuncName{Func: &ast.IdentExpr{Value: yyDollar[1].token.Str}}
			yyVAL.funcname.Func.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:233
		{
			key := &ast.StringExpr{Value: yyDollar[3].token.Str}
			key.SetLine(yyDollar[3].token.Pos.Line)
			fn := &ast.AttrGetExpr{Object: yyDollar[1].funcname.Func, Key: key}
			fn.SetLine(yyDollar[3].token.Pos.Line)
			yyVAL.funcname = &ast.FuncName{Func: fn}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:242
		{
			yyVAL.exprlist = []ast.Expr{yyDollar[1].expr}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:245
		{
			yyVAL.exprlist = append(yyDollar[1].exprlist, yyDollar[3].expr)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:250
		{
			yyVAL.expr = &ast.IdentExpr{Value: yyDollar[1].token.Str}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line lua.yy:254
		{
			yyVAL.expr = &ast.AttrGetExpr{Object: yyDollar[1].expr, Key: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:258
		{
			key := &ast.StringExpr{Value: yyDollar[3].token.Str}
			key.SetLine(yyDollar[3].token.Pos.Line)
			yyVAL.expr = &ast.AttrGetExpr{Object: yyDollar[1].expr, Key: key}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:266
		{
			yyVAL.namelist = []string{yyDollar[1].token.Str}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:269
		{
			yyVAL.namelist = append(yyDollar[1].namelist, yyDollar[3].token.Str)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:274
		{
			yyVAL.exprlist = []ast.Expr{yyDollar[1].expr}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:277
		{
			yyVAL.exprlist = append(yyDollar[1].exprlist, yyDollar[3].expr)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:282
		{
			yyVAL.expr = &ast.NilExpr{}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:286
		{
			yyVAL.expr = &ast.FalseExpr{}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:290
		{
			yyVAL.expr = &ast.TrueExpr{}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:294
		{
			yyVAL.expr = &ast.NumberExpr{Value: yyDollar[1].token.Str}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:298
		{
			yyVAL.expr = &ast.Comma3Expr{}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:302
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:305
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:308
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:311
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:314
		{
			yyVAL.expr = &ast.LogicalOpExpr{Lhs: yyDollar[1].expr, Operator: "or", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:318
		{
			yyVAL.expr = &ast.LogicalOpExpr{Lhs: yyDollar[1].expr, Operator: "and", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:322
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:326
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:330
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:334
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:338
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:342
		{
			yyVAL.expr = &ast.RelationalOpExpr{Lhs: yyDollar[1].expr, Operator: "~=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:346
		{
			yyVAL.expr = &ast.StringConcatOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:350
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:354
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:358
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:362
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:366
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:370
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Lhs: yyDollar[1].expr, Operator: "^", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line lua.yy:374
		{
			yyVAL.expr = &ast.UnaryMinusOpExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetLine(yyDollar[2].expr.Line())
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line lua.yy:378
		{
			yyVAL.expr = &ast.UnaryNotOpExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetLine(yyDollar[2].expr.Line())
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line lua.yy:382
		{
			yyVAL.expr = &ast.UnaryLenOpExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetLine(yyDollar[2].expr.Line())
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:386
		{
			yyVAL.expr = &ast.CommentExpr{Value: yyDollar[1].token.Str}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:391
		{
			yyVAL.expr = &ast.StringExpr{Value: yyDollar[1].token.Str}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:397
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:400
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:403
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:406
		{
			yyVAL.expr = yyDollar[2].expr
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:412
		{
			yyDollar[2].expr.(*ast.FuncCallExpr).AdjustRet = true
			yyVAL.expr = yyDollar[2].expr
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line lua.yy:418
		{
			yyVAL.expr = &ast.FuncCallExpr{Func: yyDollar[1].expr, Args: yyDollar[2].exprlist}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line lua.yy:422
		{
			yyVAL.expr = &ast.FuncCallExpr{Method: yyDollar[3].token.Str, Receiver: yyDollar[1].expr, Args: yyDollar[4].exprlist}
			yyVAL.expr.SetLine(yyDollar[1].expr.Line())
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line lua.yy:428
		{
			if yylex.(*Lexer).PNewLine {
				yylex.(*Lexer).TokenError(yyDollar[1].token, "ambiguous syntax (function call x new statement)")
			}
			yyVAL.exprlist = []ast.Expr{}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:434
		{
			if yylex.(*Lexer).PNewLine {
				yylex.(*Lexer).TokenError(yyDollar[1].token, "ambiguous syntax (function call x new statement)")
			}
			yyVAL.exprlist = yyDollar[2].exprlist
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:440
		{
			yyVAL.exprlist = []ast.Expr{yyDollar[1].expr}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:443
		{
			yyVAL.exprlist = []ast.Expr{yyDollar[1].expr}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line lua.yy:448
		{
			yyVAL.expr = &ast.FunctionExpr{ParList: yyDollar[2].funcexpr.ParList, Stmts: yyDollar[2].funcexpr.Stmts}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.expr.SetLastLine(yyDollar[2].funcexpr.LastLine())
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line lua.yy:455
		{
			yyVAL.funcexpr = &ast.FunctionExpr{ParList: yyDollar[2].parlist, Stmts: yyDollar[4].stmts}
			yyVAL.funcexpr.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.funcexpr.SetLastLine(yyDollar[5].token.Pos.Line)
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line lua.yy:460
		{
			yyVAL.funcexpr = &ast.FunctionExpr{ParList: &ast.ParList{HasVargs: false, Names: []string{}}, Stmts: yyDollar[3].stmts}
			yyVAL.funcexpr.SetLine(yyDollar[1].token.Pos.Line)
			yyVAL.funcexpr.SetLastLine(yyDollar[4].token.Pos.Line)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:467
		{
			yyVAL.parlist = &ast.ParList{HasVargs: true, Names: []string{}}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:470
		{
			yyVAL.parlist = &ast.ParList{HasVargs: false, Names: []string{}}
			yyVAL.parlist.Names = append(yyVAL.parlist.Names, yyDollar[1].namelist...)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:474
		{
			yyVAL.parlist = &ast.ParList{HasVargs: true, Names: []string{}}
			yyVAL.parlist.Names = append(yyVAL.parlist.Names, yyDollar[1].namelist...)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line lua.yy:481
		{
			yyVAL.expr = &ast.TableExpr{Fields: []*ast.Field{}}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:485
		{
			yyVAL.expr = &ast.TableExpr{Fields: yyDollar[2].fieldlist}
			yyVAL.expr.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:492
		{
			yyVAL.fieldlist = []*ast.Field{yyDollar[1].field}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:495
		{
			yyVAL.fieldlist = append(yyDollar[1].fieldlist, yyDollar[3].field)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line lua.yy:498
		{
			yyVAL.fieldlist = yyDollar[1].fieldlist
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line lua.yy:503
		{
			yyVAL.field = &ast.Field{Key: &ast.StringExpr{Value: yyDollar[1].token.Str}, Value: yyDollar[3].expr}
			yyVAL.field.Key.SetLine(yyDollar[1].token.Pos.Line)
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line lua.yy:507
		{
			yyVAL.field = &ast.Field{Key: yyDollar[2].expr, Value: yyDollar[5].expr}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:510
		{
			yyVAL.field = &ast.Field{Value: yyDollar[1].expr}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:515
		{
			yyVAL.fieldsep = ","
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line lua.yy:518
		{
			yyVAL.fieldsep = ";"
		}
	}
	goto yystack /* stack new state and value */
}
